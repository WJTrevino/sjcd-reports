import type { NextPage } from 'next'
import Head from 'next/head'
import CssBaseline from '@mui/material/CssBaseline';
import * as XLSX from 'xlsx'

import { Accordion, AccordionDetails, AccordionSummary, AppBar, Container, Stack, Toolbar, Typography, Card, Button, Input} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
// import sqlresults from './eac-equity.test.js';
import { ChangeEvent, ChangeEventHandler } from 'react';
import { responseSymbol } from 'next/dist/server/web/spec-compliant/fetch-event';
import * as testResponse from './sampleresponse.json';
import AnalysisGroup from '../../components/eac-equity/AnalysisGroup';


const processFile:ChangeEventHandler<HTMLInputElement> = async (e) => {
  console.log(e);
  const file = e?.target?.files?.[0];
  const url = URL.createObjectURL(file);
  const data = await (await fetch(url)).arrayBuffer();
  
  // Test: Is this an EAC Spreadsheet?
  // Also verifies that the Spreadsheet has properties where the script expects.
  function isEACWorkbook(workbook:XLSX.WorkBook) {
    const requiredSheets = [
      "Test Info",
      "Courses Included",
      "Summary Statistics",
      "Item Analysis",
      "Distractors",
      "Student Questions",
      "Student Landscape",
      "Student Coaching",
      "Blueprint"
    ];
    return (
      requiredSheets.every(v => workbook?.Sheets?.hasOwnProperty(v)) &&
      workbook?.Sheets?.["Summary Statistics"]?.A3?.v === "Scorable Questions" &&
      Math.floor(Number(workbook?.Sheets?.["Summary Statistics"]?.B3?.v)) > 0
    );
  }
  
  // const nItems = Math.floor(Number(workbook?.Sheets?.["Summary Statistics"]?.B3?.v));
  
  interface JSONRow {
    [index: string]: string | number;
  }
  let workbook:XLSX.WorkBook = XLSX.read(data);
  if (!isEACWorkbook(workbook)) {
    e.preventDefault();
    console.log("Uploaded file is not an EAC Spreadsheet.");
    return;
  }
  
  const goalsNameSheet:JSONRow[] = XLSX.utils.sheet_to_json(workbook?.Sheets?.["Goals Summary"]);
  let goals = goalsNameSheet.map(r => {
    return {
      name: String(r?.["Goals"]),
      items: Math.floor(Number(r?.["# Qs"])),
      description: String(r?.["Desc"])
    }
  });
  
  const itemSheet:JSONRow[] = XLSX.utils.sheet_to_json(workbook?.Sheets?.["Student Questions"]);
  const goalsSheet:JSONRow[] = XLSX.utils.sheet_to_json(workbook?.Sheets?.["Student Goals"]);
  let allStudents = itemSheet
  .filter(r => String(r?.["Student_id"]).search(/G\d+/i) === 0)
  .map(r => {
    // for each student
    let responses = [];
    for (const i in r) {
      const iInt = Math.floor(Number(i));
      const v = Math.floor(Number(r?.[i]));
      if (iInt > 0 && v >= 0) responses[iInt-1] = v;
    }
    
    let goalItems = goals.map((g) => {
      const matchingStudent = goalsSheet.find((i) => {
        return i?.["Student_id"] === r?.["Student_id"];
      });
      return matchingStudent?.[g.name];
    });
    
    /* THIS SECTION APPLIES ONLY TO THE TEST SPREADSHEET. FINAL DATA WILL BE JOINED FROM SQL. */
    let testSQLData = {
      race: r?.["Race/Ethnicity"],
      gender: r?.["Gender"],
      status: r?.["Status"],
      fg: r?.["First Generation"],
      pell: r?.["Pell"]
    }
    /* END OF TEST SPREADSHEET SECTION */
    return {
      sid: r?.["Student_id"],
      score: responses.reduce((c,p) => c+p),
      responses: responses,
      goals: goalItems,
      ...testSQLData // TEST SPREADSHEET ONLY
    };
  });
  console.log(
    "File Parsed:", 
    allStudents.length, "students,",
    allStudents[0]["responses"].length, "items,",
    allStudents[0]["goals"].length, "goals."
  );
}

const Home: NextPage = () => {
  console.log(testResponse);
  return (<>
    <Head>
    <title>Create Next App</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
    </Head>
    
    <main>
    <CssBaseline />
    <AppBar position='static'>
    <Toolbar>
    <Typography component='div' sx={{fixedGrow: 1}}>Reports &gt; EAC Equity Report</Typography>
    </Toolbar>
    </AppBar>
    
    <Container>
    <Accordion>
    <AccordionSummary
    expandIcon={<ExpandMoreIcon />}
    id="report-title"
    >
    <Typography>Report Overview: EAC Equity Subgroups v0.01</Typography>
    </AccordionSummary>
    <AccordionDetails>
    <Typography>At the moment, this is the slowest version of the report. All data is submitted at once, and no results ae shown until the server processes all subgroups. This can take up to 30 seconds.</Typography>
    </AccordionDetails>
    </Accordion>
    
    <Card variant='outlined' sx={{p: 1}}>
    <Typography variant='h6' component='div'>Report Options</Typography>
    <Stack>
    <label>
    EAC Export Spreadsheet
    <Input
    type="file"
    inputProps={{ accept: ".xlsx" }}
    sx={{
      width: "50%",
      m: 1,
      textOverflow: "ellipsis"
    }} 
    onChange={processFile} />
    </label>
    <Button variant="contained">
    Generate Report
    </Button>
    </Stack>
    </Card>
    </Container>
    
    <Container  id="report-generated" sx={{p: 1}}>
    <Typography variant='h6' component='div'>EAC Equity Report</Typography>
    <AnalysisGroup />
    </Container>
    <Container  id="report-loading" sx={{p: 1}}>
    <Typography component='div'>Fill out the report options above to begin.</Typography>
    </Container>
    </main>
    
    {/* <footer>
    <Container>
    <Card variant='outlined' sx={{p: 1}}>
    <Typography sx={{ fontStyle: 'italic' }} component='div'>
    Report bugs or suggestions to <a href="mailto:Westley.Trevino@sjcd.edu">Westley.Trevino@sjcd.edu</a>.
    </Typography>
    </Card>
    </Container>
  </footer> */}
  </>)
}

export default Home
